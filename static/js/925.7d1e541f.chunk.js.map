{"version":3,"file":"static/js/925.7d1e541f.chunk.js","mappings":"iQAEaA,E,OAAiBC,GAAAA,GAAH,yN,SCgD3B,EA7CkB,WAChB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAeR,OAbAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,8GAEEC,EAAAA,EAAAA,IAAoBJ,GAFtB,OAEXK,EAFW,OAGjBR,EAAQQ,GACRN,EAAS,MAJQ,gDAMjBA,EAAS,KAAMO,SANE,yDAAH,qDASlBH,GACD,GAAE,CAACH,KAGF,gCACa,OAAVF,IAAkB,kEAA0CA,KAC5C,IAAhBF,EAAKW,QACJ,0EAEA,SAACd,EAAD,UACGG,EAAKY,KAAI,WAAwCC,GAAO,IAA5CC,EAA2C,EAA3CA,GAAIC,EAAuC,EAAvCA,aAAcC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,UAC/BC,EAAQJ,EAAKD,EACXM,EAASJ,EAAY,yCACWA,GAClC,0DACJ,OACE,2BACE,gBAAKK,IAAKD,EAAQE,IAAKL,KACvB,wBAAKA,KACL,uCAAeC,OAHRC,EAMZ,QAKV,C,qLC5CKI,E,OAAYC,EAAAA,OAAa,CAC7BC,QAAS,gCACTC,OAAQ,CACNC,QAAS,sCAKAC,EAAoB,mCAAG,4FACf,QACC,MAFc,SAIXL,EAAUM,IAAV,mBAHJ,QAGI,YAFH,QAFc,cAI5BC,EAJ4B,OAK1BpB,EAASoB,EAATpB,KAL0B,kBAO3BA,EAAKqB,SAPsB,2CAAH,qDAWpBC,EAAe,mCAAG,WAAMC,GAAN,yFAENV,EAAUM,IAAI,gBAAiB,CAAEH,OAAQ,CAAEO,MAAAA,KAFrC,cAEvBH,EAFuB,OAGrBpB,EAASoB,EAATpB,KAHqB,kBAItBA,EAAKqB,SAJiB,2CAAH,sDAQfG,EAAe,mCAAG,WAAM7B,GAAN,yFACNkB,EAAUM,IAAV,gBAAuBxB,IADjB,cACvByB,EADuB,OAErBpB,EAASoB,EAATpB,KAFqB,kBAItBA,GAJsB,2CAAH,sDAQfD,EAAmB,mCAAG,WAAMJ,GAAN,yFACVkB,EAAUM,IAAV,gBAAuBxB,EAAvB,aADU,cAC3ByB,EAD2B,OAEzBpB,EAASoB,EAATpB,KAFyB,kBAI1BA,EAAKT,MAJqB,2CAAH,sDAQnBkC,EAAsB,mCAAG,WAAM9B,GAAN,yFACbkB,EAAUM,IAAV,gBAAuBxB,EAAvB,aADa,cAC9ByB,EAD8B,OAE5BpB,EAASoB,EAATpB,KAF4B,kBAI7BA,EAAKqB,SAJwB,2CAAH,qD","sources":["components/movieCast/MovieCast.styled.jsx","components/movieCast/MovieCast.jsx","components/service/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StyledCastList = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  grid-gap: 10px;\n\n  width: calc(100% - 48px);\n  margin: 20px auto;\n  padding: 0;\n\n  list-style: none;\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { APImovieDetailsCast } from 'components/service/api';\nimport { StyledCastList } from './MovieCast.styled';\n\nconst MovieCast = () => {\n  const [cast, setCast] = useState([]);\n  const [error, setError] = useState(null);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const getMovieCast = async () => {\n      try {\n        const data = await APImovieDetailsCast(movieId);\n        setCast(data);\n        setError(null);\n      } catch (error) {\n        setError(error.message);\n      }\n    };\n    getMovieCast();\n  }, [movieId]);\n\n  return (\n    <>\n      {error !== null && <p>Oops, some error occurred... Message: {error}</p>}\n      {cast.length === 0 ? (\n        <p>Sorry we have no information about the actors</p>\n      ) : (\n        <StyledCastList>\n          {cast.map(({ id, profile_path, name, character }, i) => {\n            let newId = id * i;\n            const poster = profile_path\n              ? `https://image.tmdb.org/t/p/w185${profile_path}`\n              : 'https://via.placeholder.com/185x278?text=Sorry+No+Photo';\n            return (\n              <li key={newId}>\n                <img src={poster} alt={name} />\n                <h3>{name}</h3>\n                <p>Character: {character}</p>\n              </li>\n            );\n          })}\n        </StyledCastList>\n      )}\n    </>\n  );\n};\n\nexport default MovieCast;\n","import axios from 'axios';\n\n// створюємо екземпляр класу axios, щоб не повторювати у всіх запитах однакові дані\n// для цього використовуємо метод класу сreate\nconst moviesAPI = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: 'f0f166877cbfe2faaaf5ad4de4d845ef',\n  },\n});\n\n// ----------------------------------Trend-----------------\nexport const APIgetTrandingMovies = async () => {\n  const media_type = 'movie';\n  const time_window = 'day';\n  // тут через get витягуємо створені дані і дописуємо що потрібно для конкретного запиту\n  const response = await moviesAPI.get(`trending/${media_type}/${time_window}`);\n  const { data } = response;\n\n  return data.results;\n};\n\n// ----------------------------------Search----------------------------\nexport const APIsearchMovies = async query => {\n  // тут додаткого додаємо ще один аргумент-обʼєкт params, куди передаємо дані для рядка запиту\n  const response = await moviesAPI.get('/search/movie', { params: { query } });\n  const { data } = response;\n  return data.results;\n};\n\n// -----------------------------------Details----------------------------\nexport const APImovieDetails = async movieId => {\n  const response = await moviesAPI.get(`movie/${movieId}`);\n  const { data } = response;\n\n  return data;\n};\n\n// -----------------------------------Cast--------------------------------\nexport const APImovieDetailsCast = async movieId => {\n  const response = await moviesAPI.get(`movie/${movieId}/credits`);\n  const { data } = response;\n\n  return data.cast;\n};\n\n// -----------------------------------Review-------------------------------\nexport const APImovieDetailsReviews = async movieId => {\n  const response = await moviesAPI.get(`movie/${movieId}/reviews`);\n  const { data } = response;\n\n  return data.results;\n};\n"],"names":["StyledCastList","styled","useState","cast","setCast","error","setError","movieId","useParams","useEffect","getMovieCast","APImovieDetailsCast","data","message","length","map","i","id","profile_path","name","character","newId","poster","src","alt","moviesAPI","axios","baseURL","params","api_key","APIgetTrandingMovies","get","response","results","APIsearchMovies","query","APImovieDetails","APImovieDetailsReviews"],"sourceRoot":""}
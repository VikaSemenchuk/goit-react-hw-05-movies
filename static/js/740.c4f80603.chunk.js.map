{"version":3,"file":"static/js/740.c4f80603.chunk.js","mappings":"8QAEaA,EAAaC,EAAAA,GAAAA,GAAH,4JASVC,EAAcD,EAAAA,GAAAA,GAAH,kDAIXE,EAAaF,EAAAA,GAAAA,KAAH,8C,SCiCvB,EA3CoB,WAClB,OAA8BG,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAcR,OAZAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAc,mCAAG,8GAEAC,EAAAA,EAAAA,IAAuBJ,GAFvB,OAEbK,EAFa,OAGnBR,EAAWQ,GACXN,EAAS,MAJU,gDAMnBA,EAAS,KAAMO,SANI,yDAAH,qDASpBH,GACD,GAAE,CAACH,KAEF,gCACa,OAAVF,IAAkB,kEAA0CA,KAEzC,IAAnBF,EAAQW,QACP,6DAEA,SAAChB,EAAD,UACGK,EAAQY,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,GAAIC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC1B,OACE,2BACE,UAAClB,EAAD,YACE,SAACC,EAAD,uBACCgB,MAEH,uBAAIC,MALGF,EAQZ,QAKV,C,qLC1CKG,E,OAAYC,EAAAA,OAAa,CAC7BC,QAAS,gCACTC,OAAQ,CACNC,QAAS,sCAKAC,EAAoB,mCAAG,4FACf,QACC,MAFc,SAIXL,EAAUM,IAAV,mBAHJ,QAGI,YAFH,QAFc,cAI5BC,EAJ4B,OAK1Bd,EAASc,EAATd,KAL0B,kBAO3BA,EAAKe,SAPsB,2CAAH,qDAWpBC,EAAe,mCAAG,WAAMC,GAAN,yFAENV,EAAUM,IAAI,gBAAiB,CAAEH,OAAQ,CAAEO,MAAAA,KAFrC,cAEvBH,EAFuB,OAGrBd,EAASc,EAATd,KAHqB,kBAItBA,EAAKe,SAJiB,2CAAH,sDAQfG,EAAe,mCAAG,WAAMvB,GAAN,yFACNY,EAAUM,IAAV,gBAAuBlB,IADjB,cACvBmB,EADuB,OAErBd,EAASc,EAATd,KAFqB,kBAItBA,GAJsB,2CAAH,sDAQfmB,EAAmB,mCAAG,WAAMxB,GAAN,yFACVY,EAAUM,IAAV,gBAAuBlB,EAAvB,aADU,cAC3BmB,EAD2B,OAEzBd,EAASc,EAATd,KAFyB,kBAI1BA,EAAKoB,MAJqB,2CAAH,sDAQnBrB,EAAsB,mCAAG,WAAMJ,GAAN,yFACbY,EAAUM,IAAV,gBAAuBlB,EAAvB,aADa,cAC9BmB,EAD8B,OAE5Bd,EAASc,EAATd,KAF4B,kBAI7BA,EAAKe,SAJwB,2CAAH,qD","sources":["components/movieReview/MovieReview.styled.jsx","components/movieReview/MovieReview.jsx","components/service/api.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const ListReview = styled.ul`\n    list-style: none;\n    display: flex;\n    flex-direction: column;\n    gap: 25px;\n\n    margin: 20px 0;\n    color: #033503;\n`\nexport const ReviewTitle = styled.h2`\n    margin-bottom: 10px;\n`\n\nexport const ReviewSpan = styled.span`\n    font-size: 20px;\n`","import { APImovieDetailsReviews } from 'components/service/api';\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { ListReview, ReviewSpan, ReviewTitle } from './MovieReview.styled';\n\nconst MovieReview = () => {\n  const [reviews, setReviews] = useState([]);\n  const [error, setError] = useState(null);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const getMovieReview = async () => {\n      try {\n        const data = await APImovieDetailsReviews(movieId);\n        setReviews(data);\n        setError(null);\n      } catch (error) {\n        setError(error.message);\n      }\n    };\n    getMovieReview();\n  }, [movieId]);\n  return (\n    <>\n      {error !== null && <p>Oops, some error occurred... Message: {error}</p>}\n\n      {reviews.length === 0 ? (\n        <p>Sorry there are still no reviews</p>\n      ) : (\n        <ListReview>\n          {reviews.map(({ id, author, content }) => {\n            return (\n              <li key={id}>\n                <ReviewTitle>\n                  <ReviewSpan>Author: </ReviewSpan>\n                  {author}\n                </ReviewTitle>\n                <p>{content}</p>\n              </li>\n            );\n          })}\n        </ListReview>\n      )}\n    </>\n  );\n};\n\nexport default MovieReview;\n","import axios from 'axios';\n\n// створюємо екземпляр класу axios, щоб не повторювати у всіх запитах однакові дані\n// для цього використовуємо метод класу сreate\nconst moviesAPI = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: 'f0f166877cbfe2faaaf5ad4de4d845ef',\n  },\n});\n\n// ----------------------------------Trend-----------------\nexport const APIgetTrandingMovies = async () => {\n  const media_type = 'movie';\n  const time_window = 'day';\n  // тут через get витягуємо створені дані і дописуємо що потрібно для конкретного запиту\n  const response = await moviesAPI.get(`trending/${media_type}/${time_window}`);\n  const { data } = response;\n\n  return data.results;\n};\n\n// ----------------------------------Search----------------------------\nexport const APIsearchMovies = async query => {\n  // тут додаткого додаємо ще один аргумент-обʼєкт params, куди передаємо дані для рядка запиту\n  const response = await moviesAPI.get('/search/movie', { params: { query } });\n  const { data } = response;\n  return data.results;\n};\n\n// -----------------------------------Details----------------------------\nexport const APImovieDetails = async movieId => {\n  const response = await moviesAPI.get(`movie/${movieId}`);\n  const { data } = response;\n\n  return data;\n};\n\n// -----------------------------------Cast--------------------------------\nexport const APImovieDetailsCast = async movieId => {\n  const response = await moviesAPI.get(`movie/${movieId}/credits`);\n  const { data } = response;\n\n  return data.cast;\n};\n\n// -----------------------------------Review-------------------------------\nexport const APImovieDetailsReviews = async movieId => {\n  const response = await moviesAPI.get(`movie/${movieId}/reviews`);\n  const { data } = response;\n\n  return data.results;\n};\n"],"names":["ListReview","styled","ReviewTitle","ReviewSpan","useState","reviews","setReviews","error","setError","movieId","useParams","useEffect","getMovieReview","APImovieDetailsReviews","data","message","length","map","id","author","content","moviesAPI","axios","baseURL","params","api_key","APIgetTrandingMovies","get","response","results","APIsearchMovies","query","APImovieDetails","APImovieDetailsCast","cast"],"sourceRoot":""}
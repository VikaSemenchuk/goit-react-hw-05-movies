{"version":3,"file":"static/js/441.52d7fdc7.chunk.js","mappings":"gPAGaA,GAAkBC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,yFAMfE,EAAcF,EAAAA,GAAAA,IAAH,iKASXG,EAAiBH,EAAAA,GAAAA,IAAH,8MAWdI,EAAaJ,EAAAA,GAAAA,EAAH,oF,SClBR,SAASK,EAAT,GAAqD,IAA3BC,EAA0B,EAA1BA,GAAIC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,YAC5CC,EAASD,EAAW,yCACYA,GAClC,2DACEE,GAAWC,EAAAA,EAAAA,MACXC,EAAUN,EAEhB,OACE,yBACE,SAACP,EAAD,CAAiBc,GAAE,kBAAaD,GAAWE,MAAO,CAAEC,KAAML,GAA1D,UACE,UAACR,EAAD,YACE,SAACC,EAAD,CAAgBa,IAAKP,EAAQQ,IAAKV,KAClC,SAACH,EAAD,UAAaG,UAKtB,CC1BM,IAAMW,EAAkBlB,EAAAA,GAAAA,GAAH,kNCIb,SAASmB,EAAT,GAAgC,IAAXC,EAAU,EAAVA,OAClC,OACE,SAACF,EAAD,UACGE,EAAOC,KAAI,SAAAC,GACV,OAAO,SAACjB,GAAD,UAA+BiB,GAAXA,EAAGhB,GAC/B,KAGN,C,wLCVKiB,E,QAAYC,EAAAA,OAAa,CAC7BC,QAAS,gCACTC,OAAQ,CACNC,QAAS,sCAKAC,EAAoB,mCAAG,4FACf,QACC,MAFc,SAIXL,EAAUM,IAAV,mBAHJ,QAGI,YAFH,QAFc,cAI5BC,EAJ4B,OAK1BC,EAASD,EAATC,KAL0B,kBAO3BA,EAAKC,SAPsB,2CAAH,qDAWpBC,EAAe,mCAAG,WAAMC,GAAN,yFAENX,EAAUM,IAAI,gBAAiB,CAAEH,OAAQ,CAAEQ,MAAAA,KAFrC,cAEvBJ,EAFuB,OAGrBC,EAASD,EAATC,KAHqB,kBAKtBA,EAAKC,SALiB,2CAAH,sDASfG,EAAe,mCAAG,WAAMvB,GAAN,yFACNW,EAAUM,IAAV,gBAAuBjB,IADjB,cACvBkB,EADuB,OAErBC,EAASD,EAATC,KAFqB,kBAItBA,GAJsB,2CAAH,sDAQfK,EAAmB,mCAAG,WAAMxB,GAAN,yFACVW,EAAUM,IAAV,gBAAuBjB,EAAvB,aADU,cAC3BkB,EAD2B,OAEzBC,EAASD,EAATC,KAFyB,kBAI1BA,EAAKM,MAJqB,2CAAH,sDAQnBC,EAAsB,mCAAG,WAAM1B,GAAN,yFACbW,EAAUM,IAAV,gBAAuBjB,EAAvB,aADa,cAC9BkB,EAD8B,OAE5BC,EAASD,EAATC,KAF4B,kBAI7BA,EAAKC,SAJwB,2CAAH,qD,kKC9CtBO,E,QAAavC,GAAAA,KAAH,2yB,SCIR,SAASwC,IACtB,OAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAA4BC,EAAAA,EAAAA,MAAnBC,GAAT,eAeA,OACE,0BACE,UAACN,EAAD,CAAYO,SAXhB,SAAmBC,GACjBA,EAAEC,iBACF,IAAMC,EAASP,EAAYQ,cAAcC,OAEpCF,GAAQG,EAAAA,GAAAA,QAAc,4CAE3BP,EAAgB,CAAEI,OAAAA,GACnB,EAIG,WACE,kBACEI,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,wBACZC,MAAOf,EACPgB,SAtBR,YAA2C,IAAZD,EAAW,EAArBE,OAAUF,MAC7Bd,EAAec,EAChB,EAqBOG,KAAK,WAEP,mBAAQP,KAAK,SAAb,wBAIP,C,cC/Bc,SAASQ,IACtB,OAAwCpB,EAAAA,EAAAA,UAAS,IAAjD,eAAOqB,EAAP,KAAqBC,EAArB,KACA,GAAuBnB,EAAAA,EAAAA,MACjBV,GADN,eAC2BL,IAAI,UAsB/B,OApBAmC,EAAAA,EAAAA,YAAU,WACR,GAAK9B,EAAL,CAEA,IAAM+B,EAAS,mCAAG,8GAEQhC,EAAAA,EAAAA,GAAgBC,GAFxB,OAIS,KAFjBF,EAFQ,QAIFkC,QAAgBhC,GAC1BkB,EAAAA,GAAAA,MAAA,iGAGFW,EAAgB/B,GARF,gDAWdoB,EAAAA,GAAAA,MAAA,uDAXc,yDAAH,qDAcfa,GAhBkB,CAiBnB,GAAE,CAAC/B,KAGF,iCACE,SAACM,EAAD,IACCsB,IAAgB,SAAC3C,EAAA,EAAD,CAAWC,OAAQ0C,MAGzC,C","sources":["components/movieListItem/MovieListItem.styled.jsx","components/movieListItem/MovieListItem.jsx","components/movieList/MovieList.styled.jsx","components/movieList/MovieList.jsx","components/service/api.js","components/searchMoviesForm/SearchForm.styled.jsx","components/searchMoviesForm/SearchMoviesForm.jsx","pages/MoviesPage.jsx"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const StyledMovieLink = styled(Link)`\n  min-height: 600px;\n  text-decoration: none;\n  color: black;\n`;\n\nexport const ItemWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n  height: 100%;\n`;\n\nexport const StyledMovieImg = styled.img`\n  margin-bottom: 15px;\n  object-fit: scale-down;\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  :hover {\n    transform: scale(1.03);\n    cursor: zoom-in;\n  }\n`;\n\nexport const MovieTitle = styled.p`\n  font-size: 25px;\n  height: 60px;\n  text-align: center;\n`;\n","import React from 'react';\nimport { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport {\n  ItemWrapper,\n  MovieTitle,\n  StyledMovieImg,\n  StyledMovieLink,\n} from './MovieListItem.styled';\n\nexport default function MovieListItem ({ id, title, poster_path }) {\n  const poster = poster_path\n    ? `https://image.tmdb.org/t/p/w342${poster_path}`\n    : 'https://via.placeholder.com/342x512?text=Sorry+No+Poster';\n  const location = useLocation();\n  const movieId = id;\n\n  return (\n    <li>\n      <StyledMovieLink to={`/movies/${movieId}`} state={{ from: location }}>\n        <ItemWrapper>\n          <StyledMovieImg src={poster} alt={title} />\n          <MovieTitle>{title}</MovieTitle>\n        </ItemWrapper>\n      </StyledMovieLink>\n    </li>\n  );\n};\n\nMovieListItem.propTypes = {\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  poster_path: PropTypes.string,\n};","import styled from 'styled-components';\n\nexport const StyledMovieList = styled.ul`\n  display: grid;\n  width: calc(100% - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n  grid-gap: 30px;\n  margin: 0 auto;\n  padding: 0;\n  list-style: none;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport MovieListItem from 'components/movieListItem/MovieListItem';\n\nimport { StyledMovieList } from './MovieList.styled';\n\nexport default function MovieList({ movies }) {\n  return (\n    <StyledMovieList>\n      {movies.map(el => {\n        return <MovieListItem key={el.id} {...el} />;\n      })}\n    </StyledMovieList>\n  );\n}\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(PropTypes.object.isRequired).isRequired,\n};","import axios from 'axios';\n\n// створюємо екземпляр класу axios, щоб не повторювати у всіх запитах однакові дані\n// для цього використовуємо метод класу сreate\nconst moviesAPI = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: 'f0f166877cbfe2faaaf5ad4de4d845ef',\n  },\n});\n\n// ----------------------------------Trend-----------------\nexport const APIgetTrandingMovies = async () => {\n  const media_type = 'movie';\n  const time_window = 'day';\n  // тут через get витягуємо створені дані і дописуємо що потрібно для конкретного запиту\n  const response = await moviesAPI.get(`trending/${media_type}/${time_window}`);\n  const { data } = response;\n\n  return data.results;\n};\n\n// ----------------------------------Search----------------------------\nexport const APIsearchMovies = async query => {\n  // тут додаткого додаємо ще один аргумент-обʼєкт params, куди передаємо дані для рядка запиту\n  const response = await moviesAPI.get('/search/movie', { params: { query } });\n  const { data } = response;\n  \n  return data.results;\n};\n\n// -----------------------------------Details----------------------------\nexport const APImovieDetails = async movieId => {\n  const response = await moviesAPI.get(`movie/${movieId}`);\n  const { data } = response;\n\n  return data;\n};\n\n// -----------------------------------Cast--------------------------------\nexport const APImovieDetailsCast = async movieId => {\n  const response = await moviesAPI.get(`movie/${movieId}/credits`);\n  const { data } = response;\n\n  return data.cast;\n};\n\n// -----------------------------------Review-------------------------------\nexport const APImovieDetailsReviews = async movieId => {\n  const response = await moviesAPI.get(`movie/${movieId}/reviews`);\n  const { data } = response;\n\n  return data.results;\n};\n","import styled from 'styled-components';\n\nexport const SearchForm = styled.form`\n  display: flex;\n  align-items: center;\n\n  max-width: 600px;\n  margin: 30px 0;\n\n  background-color: #fff;\n\n  & button {\n    min-width: 60px;\n    height: 35px;\n\n    border: solid 1px #0b562f;\n    border-radius: 5px;\n\n    color: #07893f;\n    background-color: #b6f6b6;\n\n    font-size: 15px;\n\n    transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    cursor: pointer;\n\n    &:hover,\n    :focus {\n      color: #ffffff;\n      background-color: #07893f;\n      transition: all 0.3s ease-in-out;\n      filter: drop-shadow(0px 4px 4px rgba(0, 0, 0, 0.25));\n    }\n  }\n\n  & input {\n    width: 100%;\n    padding: 5px 10px;\n\n    border: solid 1px #0b562f;\n    border-radius: 5px;\n    outline-color: green;\n\n    color: #044f0e;\n    font-size: 20px;\n  }\n`;\n","import React, { useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { toast } from 'react-toastify';\nimport { SearchForm } from './SearchForm.styled';\n\nexport default function SearchMoviesForm () {\n  const [searchQuary, setSearchQuary] = useState('');\n  const [, setSearchParams] = useSearchParams();\n\n  function onChange ({ target: { value } }) {\n    setSearchQuary(value);\n  };\n\n  function onSubmit (e) {\n    e.preventDefault();\n    const search = searchQuary.toLowerCase().trim();\n\n    if (!search) toast.warning('Please enter some information for search');\n\n    setSearchParams({ search });\n  };\n\n  return (\n    <div>\n      <SearchForm onSubmit={onSubmit}>\n        <input\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search movie you wish\"\n          value={searchQuary}\n          onChange={onChange}\n          name=\"query\"\n        />\n        <button type=\"submit\">Search</button>\n      </SearchForm>\n    </div>\n  );\n};","import React, { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { toast } from 'react-toastify';\nimport { APIsearchMovies } from 'components/service/api';\nimport SearchMoviesForm from 'components/searchMoviesForm/SearchMoviesForm';\nimport MovieList from 'components/movieList/MovieList';\n\nexport default function MoviesPage() {\n  const [searchMovies, setSearchMovies] = useState([]);\n  const [searchParams] = useSearchParams();\n  const query = searchParams.get('search');\n\n  useEffect(() => {\n    if (!query) return;\n\n    const getMovies = async () => {\n      try {\n        const results = await APIsearchMovies(query);\n\n        if (results.length === 0 && query)\n          toast.error(`Sorry. There are no movies ... 😭. Please, try some other words for\n        search`);\n\n        setSearchMovies(results);\n        \n      } catch (error) {\n        toast.error(`Oops, some error occurred... Message: ${error}`);\n      }\n    };\n    getMovies();\n  }, [query]);\n\n  return (\n    <>\n      <SearchMoviesForm />\n      {searchMovies && <MovieList movies={searchMovies} />}\n    </>\n  );\n}\n"],"names":["StyledMovieLink","styled","Link","ItemWrapper","StyledMovieImg","MovieTitle","MovieListItem","id","title","poster_path","poster","location","useLocation","movieId","to","state","from","src","alt","StyledMovieList","MovieList","movies","map","el","moviesAPI","axios","baseURL","params","api_key","APIgetTrandingMovies","get","response","data","results","APIsearchMovies","query","APImovieDetails","APImovieDetailsCast","cast","APImovieDetailsReviews","SearchForm","SearchMoviesForm","useState","searchQuary","setSearchQuary","useSearchParams","setSearchParams","onSubmit","e","preventDefault","search","toLowerCase","trim","toast","type","autoComplete","autoFocus","placeholder","value","onChange","target","name","MoviesPage","searchMovies","setSearchMovies","useEffect","getMovies","length"],"sourceRoot":""}
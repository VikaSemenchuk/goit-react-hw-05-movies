{"version":3,"file":"static/js/740.13d5e259.chunk.js","mappings":"gSAEaA,EAAaC,EAAAA,GAAAA,GAAH,4JASVC,EAAcD,EAAAA,GAAAA,GAAH,kDAIXE,EAAaF,EAAAA,GAAAA,KAAH,8C,SCRR,SAASG,IACtB,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAeR,OAbAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAc,mCAAG,8GAEAC,EAAAA,EAAAA,IAAuBJ,GAFvB,OAEbK,EAFa,OAGnBN,EAAWM,GAHQ,gDAMnBC,EAAAA,GAAAA,MAAA,gDAAqD,KAAMC,UANxC,yDAAH,qDASpBJ,GACD,GAAE,CAACH,KAGF,8BACsB,IAAnBF,EAAQU,QACP,6DAEA,SAAChB,EAAD,UACGM,EAAQW,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,GAAIC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC1B,OACE,2BACE,UAAClB,EAAD,YACE,SAACC,EAAD,uBACCgB,MAEH,uBAAIC,MALGF,EAQZ,OAKV,C,wLCzCKG,E,QAAYC,EAAAA,OAAa,CAC7BC,QAAS,gCACTC,OAAQ,CACNC,QAAS,sCAKAC,EAAoB,mCAAG,4FACf,QACC,MAFc,SAIXL,EAAUM,IAAV,mBAHJ,QAGI,YAFH,QAFc,cAI5BC,EAJ4B,OAK1Bf,EAASe,EAATf,KAL0B,kBAO3BA,EAAKgB,SAPsB,2CAAH,qDAWpBC,EAAe,mCAAG,WAAMC,GAAN,yFAENV,EAAUM,IAAI,gBAAiB,CAAEH,OAAQ,CAAEO,MAAAA,KAFrC,cAEvBH,EAFuB,OAGrBf,EAASe,EAATf,KAHqB,kBAKtBA,EAAKgB,SALiB,2CAAH,sDASfG,EAAe,mCAAG,WAAMxB,GAAN,yFACNa,EAAUM,IAAV,gBAAuBnB,IADjB,cACvBoB,EADuB,OAErBf,EAASe,EAATf,KAFqB,kBAItBA,GAJsB,2CAAH,sDAQfoB,EAAmB,mCAAG,WAAMzB,GAAN,yFACVa,EAAUM,IAAV,gBAAuBnB,EAAvB,aADU,cAC3BoB,EAD2B,OAEzBf,EAASe,EAATf,KAFyB,kBAI1BA,EAAKqB,MAJqB,2CAAH,sDAQnBtB,EAAsB,mCAAG,WAAMJ,GAAN,yFACba,EAAUM,IAAV,gBAAuBnB,EAAvB,aADa,cAC9BoB,EAD8B,OAE5Bf,EAASe,EAATf,KAF4B,kBAI7BA,EAAKgB,SAJwB,2CAAH,qD","sources":["components/movieReview/MovieReview.styled.jsx","components/movieReview/MovieReview.jsx","components/service/api.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const ListReview = styled.ul`\n    list-style: none;\n    display: flex;\n    flex-direction: column;\n    gap: 25px;\n\n    margin: 20px 0;\n    color: #033503;\n`\nexport const ReviewTitle = styled.h2`\n    margin-bottom: 10px;\n`\n\nexport const ReviewSpan = styled.span`\n    font-size: 20px;\n`","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\n\nimport { APImovieDetailsReviews } from 'components/service/api';\nimport { ListReview, ReviewSpan, ReviewTitle } from './MovieReview.styled';\n\nexport default function MovieReview () {\n  const [reviews, setReviews] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const getMovieReview = async () => {\n      try {\n        const data = await APImovieDetailsReviews(movieId);\n        setReviews(data);\n\n      } catch (error) {\n        toast.error(`Oops, some error occurred... Message: ${error.message}`)\n      }\n    };\n    getMovieReview();\n  }, [movieId]);\n\n  return (\n    <>\n      {reviews.length === 0  ? (\n        <p>Sorry there are still no reviews</p>\n      ) : (\n        <ListReview>\n          {reviews.map(({ id, author, content }) => {\n            return (\n              <li key={id}>\n                <ReviewTitle>\n                  <ReviewSpan>Author: </ReviewSpan>\n                  {author}\n                </ReviewTitle>\n                <p>{content}</p>\n              </li>\n            );\n          })}\n        </ListReview>\n      )}\n    </>\n  );\n};","import axios from 'axios';\n\n// створюємо екземпляр класу axios, щоб не повторювати у всіх запитах однакові дані\n// для цього використовуємо метод класу сreate\nconst moviesAPI = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: 'f0f166877cbfe2faaaf5ad4de4d845ef',\n  },\n});\n\n// ----------------------------------Trend-----------------\nexport const APIgetTrandingMovies = async () => {\n  const media_type = 'movie';\n  const time_window = 'day';\n  // тут через get витягуємо створені дані і дописуємо що потрібно для конкретного запиту\n  const response = await moviesAPI.get(`trending/${media_type}/${time_window}`);\n  const { data } = response;\n\n  return data.results;\n};\n\n// ----------------------------------Search----------------------------\nexport const APIsearchMovies = async query => {\n  // тут додаткого додаємо ще один аргумент-обʼєкт params, куди передаємо дані для рядка запиту\n  const response = await moviesAPI.get('/search/movie', { params: { query } });\n  const { data } = response;\n  \n  return data.results;\n};\n\n// -----------------------------------Details----------------------------\nexport const APImovieDetails = async movieId => {\n  const response = await moviesAPI.get(`movie/${movieId}`);\n  const { data } = response;\n\n  return data;\n};\n\n// -----------------------------------Cast--------------------------------\nexport const APImovieDetailsCast = async movieId => {\n  const response = await moviesAPI.get(`movie/${movieId}/credits`);\n  const { data } = response;\n\n  return data.cast;\n};\n\n// -----------------------------------Review-------------------------------\nexport const APImovieDetailsReviews = async movieId => {\n  const response = await moviesAPI.get(`movie/${movieId}/reviews`);\n  const { data } = response;\n\n  return data.results;\n};\n"],"names":["ListReview","styled","ReviewTitle","ReviewSpan","MovieReview","useState","reviews","setReviews","movieId","useParams","useEffect","getMovieReview","APImovieDetailsReviews","data","toast","message","length","map","id","author","content","moviesAPI","axios","baseURL","params","api_key","APIgetTrandingMovies","get","response","results","APIsearchMovies","query","APImovieDetails","APImovieDetailsCast","cast"],"sourceRoot":""}